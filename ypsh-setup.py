#!/usr/bin/env python3
#################################################################
# YPSH Language - Your route of Programming is Starting from Here
# Installer / Updater
# MIT License
# Copyright (c) 2025 DiamondGotCat
# Generated by LLM
#################################################################

from __future__ import annotations

import os
import platform
import requests
import zipfile
import tempfile
import shutil
import sys
import traceback
from typing import Literal, Dict, Any

from rich import print

# ─────────────────────────────────────────────────────────────────────────────
# Optional GUI dependencies
# ─────────────────────────────────────────────────────────────────────────────
try:
    from PySide6.QtCore import QThread, Signal, Qt  # type: ignore
    from PySide6.QtWidgets import (  # type: ignore
        QApplication,
        QWizard,
        QWizardPage,
        QVBoxLayout,
        QHBoxLayout,
        QLabel,
        QLineEdit,
        QPushButton,
        QRadioButton,
        QButtonGroup,
        QTextEdit,
        QCheckBox,
        QFileDialog,
        QProgressBar,
    )

    PYSIDE_AVAILABLE = True
except ModuleNotFoundError:
    PYSIDE_AVAILABLE = False

# ─────────────────────────────────────────────────────────────────────────────
# Shared installer logic
# ─────────────────────────────────────────────────────────────────────────────
Channel = Literal["stable", "beta", "custom"]


def passingGatekeeper(path: str):
    os.system(f"xattr -d com.apple.quarantine '{path}'")


def debugIt(content: str, show: bool = True):
    if show:
        print(f"[DEBUG] {content}")


def getTagFromChannel(id: str) -> str:
    base = "https://ypsh-dgc.github.io/YPSH/channels/"
    return requests.get(f"{base}{id}.txt", timeout=10).text.strip()


def getAutoBuildInfomation(tag: str) -> Dict[str, Any]:
    system = platform.system()
    arch = platform.machine()

    def err(msg):
        return {"status": "error", "desc": msg}

    if system == "Darwin":
        if arch.lower() in ("x86_64", "amd64"):
            dl = f"https://github.com/YPSH-DGC/YPSH/releases/download/{tag}/YPSH-macos-amd64.zip"
            origin, friendly = "YPSH-macos-amd64", "macOS Intel"
        elif arch.lower() in ("arm64", "aarch64"):
            dl = f"https://github.com/YPSH-DGC/YPSH/releases/download/{tag}/YPSH-macos-arm64.zip"
            origin, friendly = "YPSH-macos-arm64", "macOS Apple Silicon"
        else:
            return err(f"Unsupported CPU: {arch}")
        final, gate = "ypsh", True
    elif system == "Linux":
        if arch.lower() in ("x86_64", "amd64"):
            dl = f"https://github.com/YPSH-DGC/YPSH/releases/download/{tag}/YPSH-linux-amd64.zip"
            origin, friendly = "YPSH-linux-amd64", "Linux Intel/AMD"
        elif arch.lower() in ("arm64", "aarch64"):
            dl = f"https://github.com/YPSH-DGC/YPSH/releases/download/{tag}/YPSH-linux-arm64.zip"
            origin, friendly = "YPSH-linux-arm64", "Linux ARM"
        else:
            return err(f"Unsupported CPU: {arch}")
        final, gate = "ypsh", False
    elif system == "Windows":
        if arch.lower() in ("x86_64", "amd64"):
            dl = f"https://github.com/YPSH-DGC/YPSH/releases/download/{tag}/YPSH-windows-amd64.zip"
            origin, friendly = "YPSH-windows-amd64.exe", "Windows Intel/AMD"
        elif arch.lower() in ("arm64", "aarch64"):
            dl = f"https://github.com/YPSH-DGC/YPSH/releases/download/{tag}/YPSH-windows-arm64.zip"
            origin, friendly = "YPSH-windows-arm64.exe", "Windows ARM"
        else:
            return err(f"Unsupported CPU: {arch}")
        final, gate = "ypsh.exe", False
    else:
        return err(f"Unsupported OS: {system}")

    return {
        "status": "ok",
        "platform": friendly,
        "url": dl,
        "origin_filename": origin,
        "recommended_filename": final,
        "isGatekeeperCommandRequire": gate,
    }


def install(*, to: str, channel: Channel, custom_tag: str | None, ignoreGatekeeper: bool, debug: bool) -> Dict[str, Any]:
    tag = custom_tag if channel == "custom" else getTagFromChannel(channel)
    info = getAutoBuildInfomation(tag)
    if info.get("status") == "error":
        return info

    gate = False if ignoreGatekeeper else info["isGatekeeperCommandRequire"]
    with tempfile.TemporaryDirectory() as tmp:
        zpath = os.path.join(tmp, "ypsh.zip")
        debugIt(f"Downloading {info['url']}", debug)
        with requests.get(info["url"], timeout=60) as r:
            r.raise_for_status()
            open(zpath, "wb").write(r.content)
        debugIt("Extracting…", debug)
        with zipfile.ZipFile(zpath) as zf:
            zf.extract(info["origin_filename"], tmp)
        src = os.path.join(tmp, info["origin_filename"])
        os.makedirs(to, exist_ok=True)
        dst = os.path.join(to, info["recommended_filename"])
        shutil.copy2(src, dst)
        os.chmod(dst, 0o755)
        if gate:
            passingGatekeeper(dst)
    return {"status": "ok"}

# ─────────────────────────────────────────────────────────────────────────────
# CLI mode
# ─────────────────────────────────────────────────────────────────────────────

def run_cli(argv: list[str]):
    opts: Dict[str, Any] = {}
    nxt: str | None = None
    for a in argv:
        k = a.lstrip("-").lower()
        if nxt:
            opts[nxt] = a
            nxt = None
            continue
        if k in ("c", "ch", "channel"):
            nxt = "channel"
        elif k in ("tag", "t", "v", "version"):
            nxt = "custom_tag"
        elif k in ("to", "dest"):
            nxt = "to"
        elif k in ("d", "debug", "ve", "verbose"):
            opts["debug"] = True
        elif k in ("ig", "ignoregatekeeper"):
            opts["ignoreGatekeeper"] = True
    res = install(
        to=opts.get("to", os.path.join(os.path.expanduser("~"), ".ypsh", "bin")),
        channel=opts.get("channel", "stable"),
        custom_tag=opts.get("custom_tag"),
        ignoreGatekeeper=opts.get("ignoreGatekeeper", False),
        debug=opts.get("debug", False),
    )
    if res.get("status") == "ok":
        print("[green]Installation successful[/green]")
    else:
        print(f"[red]Failed:[/red] {res.get('desc')}")

# ─────────────────────────────────────────────────────────────────────────────
# Wizard‑style GUI (only if PySide6 present)
# ─────────────────────────────────────────────────────────────────────────────
DEFAULT_DEST = os.path.join(os.path.expanduser("~"), ".ypsh", "bin")

if PYSIDE_AVAILABLE:

    class InstallerThread(QThread):
        log = Signal(str)
        finished = Signal(dict)
        def __init__(self, kwargs: Dict[str, Any]):
            super().__init__()
            self.kwargs = kwargs
        def run(self):
            self.log.emit("[INFO] Installation started…")
            try:
                out = install(**self.kwargs)
                ok = out.get("status") == "ok"
                self.log.emit("[INFO] Finished: " + ("SUCCESS" if ok else "FAIL"))
            except Exception:
                out = {"status": "error", "desc": "Unhandled"}
                self.log.emit(traceback.format_exc())
            self.finished.emit(out)

    # ── Pages ────────────────────────────────────────────────────────────
    class WelcomePage(QWizardPage):
        def __init__(self):
            super().__init__()
            self.setTitle("Welcome to the YPSH Installer")
            self.setSubTitle("This wizard will guide you through the installation.")

            vbox = QVBoxLayout(self)
            vbox.addWidget(QLabel("Press *Next* to continue, or *Cancel* to exit the setup."))

    class ChannelPage(QWizardPage):
        def __init__(self):
            super().__init__()
            self.setTitle("Choose a Release Channel")
            lay = QVBoxLayout()
            self.grp = QButtonGroup(self)
            self.rad_stable = QRadioButton("Stable"); self.rad_stable.setChecked(True)
            self.rad_beta = QRadioButton("Beta")
            self.rad_custom = QRadioButton("Custom")
            for i, w in enumerate([self.rad_stable, self.rad_beta, self.rad_custom]):
                self.grp.addButton(w, i); lay.addWidget(w)

            self._holder = QLineEdit("stable")
            self._holder.hide()
            self.registerField("channel", self._holder)

            # Emit completion changed on selection change
            self.grp.idClicked.connect(lambda _id: self.completeChanged.emit())
            self.setLayout(lay)
        # Allow *Next* whenever any radio is selected (always true)
        def isComplete(self):
            return True
        def validatePage(self):
            ch = "stable" if self.rad_stable.isChecked() else "beta" if self.rad_beta.isChecked() else "custom"
            self.wizard().setField("channel", ch)
            return True
        def nextId(self):
            return InstallerWizard.Page_CustomTag if self.wizard().field("channel") == "custom" else InstallerWizard.Page_Destination

    class CustomTagPage(QWizardPage):
        def __init__(self):
            super().__init__()
            self.setTitle("Specify Custom Version Tag")
            lay = QVBoxLayout(); self.edit = QLineEdit(); lay.addWidget(self.edit); self.setLayout(lay)
            self.registerField("custom_tag", self.edit)
        def nextId(self):
            return InstallerWizard.Page_Destination

    class DestinationPage(QWizardPage):
        def __init__(self):
            super().__init__()
            self.setTitle("Choose Installation Directory")
            layH = QHBoxLayout(); self.edit = QLineEdit(DEFAULT_DEST); btn = QPushButton("Browse…")
            btn.clicked.connect(self._browse); layH.addWidget(self.edit, 1); layH.addWidget(btn)
            lay = QVBoxLayout(); lay.addLayout(layH); self.setLayout(lay)
            self.registerField("dest", self.edit)
        def _browse(self):
            d = QFileDialog.getExistingDirectory(self, "Select Directory", self.edit.text());
            if d: self.edit.setText(d)
        def nextId(self):
            return InstallerWizard.Page_Advanced

    class AdvancedPage(QWizardPage):
        def __init__(self):
            super().__init__()
            self.setTitle("Advanced Options")
            lay = QVBoxLayout(); self.chk_gate = QCheckBox("Ignore Gatekeeper (macOS)"); self.chk_dbg = QCheckBox("Verbose Debug")
            lay.addWidget(self.chk_gate); lay.addWidget(self.chk_dbg); self.setLayout(lay)
            self.registerField("ignoreGatekeeper", self.chk_gate); self.registerField("debug", self.chk_dbg)
        def nextId(self):
            return InstallerWizard.Page_Install

    class InstallPage(QWizardPage):
        def __init__(self):
            super().__init__(); self.setTitle("Installing…"); self.setFinalPage(False)
            lay = QVBoxLayout(); self.prg = QProgressBar(); self.prg.setRange(0,0); self.log = QTextEdit(); self.log.setReadOnly(True)
            lay.addWidget(self.prg); lay.addWidget(self.log, 1); self.setLayout(lay)
            self.thread: InstallerThread | None = None
        def initializePage(self):
            wiz = self.wizard(); kwargs = {
                "to": wiz.field("dest") or DEFAULT_DEST,
                "channel": wiz.field("channel") or "stable",
                "custom_tag": wiz.field("custom_tag") or None,
                "ignoreGatekeeper": bool(wiz.field("ignoreGatekeeper")),
                "debug": bool(wiz.field("debug")),
            }
            self.thread = InstallerThread(kwargs); self.thread.log.connect(self.log.append); self.thread.finished.connect(self._done); self.thread.start()
            wiz.button(QWizard.BackButton).setEnabled(False); wiz.button(QWizard.NextButton).setEnabled(False)
        def _done(self, res):
            self.prg.setRange(0,1); self.wizard().button(QWizard.NextButton).setEnabled(True)
            self.wizard().button(QWizard.NextButton).click()
        def nextId(self):
            return InstallerWizard.Page_Finish

    class FinishPage(QWizardPage):
        def __init__(self):
            super().__init__(); self.setTitle("Completed"); lay = QVBoxLayout(); lay.addWidget(QLabel("YPSH has been installed.")); self.setLayout(lay); self.setFinalPage(True)

    class InstallerWizard(QWizard):
        Page_Welcome, Page_Channel, Page_CustomTag, Page_Destination, Page_Advanced, Page_Install, Page_Finish = range(7)

        def __init__(self):
            super().__init__()

            self.setWindowTitle("YPSH Setup Wizard")
            self.setWizardStyle(QWizard.ModernStyle)

            self.setPage(self.Page_Welcome, WelcomePage())
            self.setPage(self.Page_Channel, ChannelPage())
            self.setPage(self.Page_CustomTag, CustomTagPage())
            self.setPage(self.Page_Destination, DestinationPage())
            self.setPage(self.Page_Advanced, AdvancedPage())
            self.setPage(self.Page_Install, InstallPage())
            self.setPage(self.Page_Finish, FinishPage())

            self.setButtonLayout([
                QWizard.Stretch,
                QWizard.CancelButton,
                QWizard.BackButton,
                QWizard.NextButton,
                QWizard.FinishButton,
            ])

            self.currentIdChanged.connect(self._update_cancel_visibility)
            self._update_cancel_visibility(self.currentId())

            self.setOption(QWizard.NoBackButtonOnStartPage, True)

        def _update_cancel_visibility(self, page_id: int):
            cancel_btn = self.button(QWizard.CancelButton)
            if cancel_btn is None:
                return
            cancel_btn.setVisible(page_id == self.Page_Welcome)

    def launch_gui():
        app = QApplication(sys.argv); w = InstallerWizard(); w.resize(600,500); w.show(); sys.exit(app.exec())
else:
    def launch_gui():
        print("[yellow]PySide6 not installed; using CLI.")
        run_cli([a for a in sys.argv[1:] if a != "cli"])

# ─────────────────────────────────────────────────────────────────────────────
# Entry
# ─────────────────────────────────────────────────────────────────────────────
if __name__ == "__main__":
    argv = sys.argv[1:]
    if "cli" in argv or not PYSIDE_AVAILABLE:
        if "cli" in argv: argv.remove("cli")
        run_cli(argv)
    else:
        launch_gui()
